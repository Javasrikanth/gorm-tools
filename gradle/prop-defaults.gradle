// sets up default composed props on ext from base props in gradle.properties
//!!!properties should go there, not here!!
// its assumed that certain props exists already as base lines to use

//** Github
defProp 'githubRepo', name //defualts to project name
defProp 'githubSlug', "$githubOrg/$githubRepo".toString()
defProp 'githubUrl', "https://github.com/${githubSlug}".toString()
defProp 'githubIssues', "https://github.com/${githubSlug}".toString()

//** Maven, Bintray, Artifactory settings
defProp 'websiteUrl', "https://${githubOrg}.github.io/${githubRepo}".toString()
defProp 'artifactoryUsername', envProp("ARTIFACTORY_USER")
defProp 'artifactoryPassword', envProp("ARTIFACTORY_PASSWORD")
defProp 'isSnapshot', version.toString().endsWith("-SNAPSHOT")

//** Helpful dir params
defProp 'gradleDir', "$rootDir/gradle"

def defProp(String propertyName, defaultValue) {
  if(!hasProperty(propertyName)) {
    ext[propertyName] = defaultValue
  }
}

// first check the environment variable then look at gradle.props
def envProp(prop){
  if (System.env[prop] != null) {
    return System.env[prop]
  } else if (project.hasProperty(prop)) {
    return project[prop]
  } else {
    return null //'unknown_' + prop
  }
}

task printProps {
  doLast {
    println "websiteUrl: " + websiteUrl
    project.ext.properties.sort { e1, e2 -> undotKeys(e1.key) <=> undotKeys(e2.key) }
      .each { k, v -> println "${k}: ${v}" }
  }
}

def undotKeys(key) {
  if (!key.contains('.')) { key += 'x' }
  key.replaceAll(/\.(\w)/) { match, group -> group.toUpperCase() }
}
