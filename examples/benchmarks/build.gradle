buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.1"
        classpath "gradle.plugin.com.energizedwork:idea-gradle-plugins:1.4"
        //classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    }
}

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
// apply plugin:"com.energizedwork.webdriver-binaries"
// apply plugin:"com.energizedwork.idea-project-components"
//apply plugin:"org.grails.grails-gsp"

//Dont cache snapshots so that gradle will download it whenever it changes
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 1, 'seconds'
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"

    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:async"
    //runtime "org.grails:grails-async-gpars"

    //gorm
    //compile "org.grails.plugins:hibernate5"
    //compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"

    compile "org.grails:grails-async-gpars"
    compile "org.grails:grails-events-gpars"
    compile 'org.grails.plugins:spring-security-core:3.2.0'

    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"

    // Required for MySql db
    //runtime 'mysql:mysql-connector-java:5.1.42'
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.6"

    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-remote-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-api:3.6.0"

    //runtime 'mysql:mysql-connector-java:5.1.5'
    compile project(':gorm-tools')
    compile("org.grails.plugins:audit-trail:3.0.8") { changing = true }
    compile 'org.grails.plugins:csv:1.0'

    compile "io.reactivex.rxjava2:rxjava:2.1.6"
    compile "org.codehaus.gpars:gpars:1.2.0"

    compile 'org.grails.plugins:spring-security-core:3.2.0'

    //compile "org.springframework:spring-test:4.3.7.RELEASE"
}

// bootRun {
//     jvmArgs('-Dspring.output.ansi.enabled=always')
//     addResources = true
// }

//compileGroovy {
//    options.fork = true
//    String auditTrailEnabled = System.getProperty("auditTrail.enabled", "false")
//    options.forkOptions.jvmArgs = ["-DauditTrail.enabled=$auditTrailEnabled".toString()]
//}

//Pass system properties to bootrun tasks, so that it can be used in benchmarks.
tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
    systemProperties = System.properties
}

war.archiveName = "benchmarks.war"


// webdriverBinaries {
//     chromedriver '2.32'
//     geckodriver '0.18.0'
// }

// tasks.withType(Test) {
//     systemProperty "geb.env", System.getProperty('geb.env')
//     systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
//     systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
// }

/**
 * Need to pass module path system property to groovy compiler so that AuditTrailAST Transformation can find correct application.groovy
 */
compileGroovy {
    groovyOptions.fork = true
    String path = projectDir.absolutePath
    groovyOptions.forkOptions.jvmArgs = ['-Dmodule.path=' + path]
}
